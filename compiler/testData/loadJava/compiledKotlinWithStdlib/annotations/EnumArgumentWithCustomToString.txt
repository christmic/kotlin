package test

public final enum class E : kotlin.Enum<test.E> {
    enum entry CAKE

    @kotlin.internal.IntrinsicConstEvaluation public final override /*1*/ /*fake_override*/ val name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.E): kotlin.Int
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.E!>!
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    /*primary*/ private constructor E()

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.E
    public final /*synthesized*/ fun values(): kotlin.Array<test.E>
    public final /*synthesized*/ val entries: kotlin.enums.EnumEntries<test.E>
        public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.E>
}

public final annotation class EnumAnno : kotlin.Annotation {
    public final val value: test.E
        public final fun `<get-value>`(): test.E
    /*primary*/ public constructor EnumAnno(/*0*/ value: test.E)
}

public final class EnumArgumentWithCustomToString {
    @test.EnumAnno(value = E.CAKE) @test.EnumArrayAnno(value = {E.CAKE, E.CAKE}) public final fun annotated(): kotlin.Unit
    /*primary*/ public constructor EnumArgumentWithCustomToString()
}

public final annotation class EnumArrayAnno : kotlin.Annotation {
    public final val value: kotlin.Array<out test.E>
        public final fun `<get-value>`(): kotlin.Array<out test.E>
    /*primary*/ public constructor EnumArrayAnno(/*0*/ vararg value: test.E /*kotlin.Array<out test.E>*/)
}
