package test

public final class A {

    public final enum class E : kotlin.Enum<test.A.E> {
        enum entry ENTRY

        @kotlin.internal.IntrinsicConstEvaluation public final override /*1*/ /*fake_override*/ val name: kotlin.String
            public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
        public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
            public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
        protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.A.E): kotlin.Int
        public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.A.E!>!
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
        /*primary*/ private constructor E()

        // Static members
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.A.E
        public final /*synthesized*/ fun values(): kotlin.Array<test.A.E>
        public final /*synthesized*/ val entries: kotlin.enums.EnumEntries<test.A.E>
            public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.A.E>
    }
    /*primary*/ public constructor A()
}
