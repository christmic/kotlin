package test

public final enum class E : kotlin.Enum<test.E> {
    enum entry ONE

    enum entry TWO

    enum entry THREE

    enum entry FOUR

    enum entry FIVE

    enum entry SIX

    enum entry SEVEN

    enum entry EIGHT

    @kotlin.internal.IntrinsicConstEvaluation public final override /*1*/ /*fake_override*/ val name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.E): kotlin.Int
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.E!>!
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    /*primary*/ private constructor E()

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.E
    public final /*synthesized*/ fun values(): kotlin.Array<test.E>
    public final /*synthesized*/ val entries: kotlin.enums.EnumEntries<test.E>
        public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.E>
}
